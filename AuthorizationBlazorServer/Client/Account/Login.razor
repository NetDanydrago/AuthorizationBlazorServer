@page "/identityserver4/Login"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
<Popper Show="@ShowPopper" IsDanger="true" Message="@Message" />
<div class="container">
    <div class="lead">
        <h1>Login</h1>
        <p>Choose how to login</p>
    </div>
    <div class="row">
        @if (Model.EnableLocalLogin)
        {
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-header">
                        <h2>Local Account</h2>
                    </div>

                    <div class="card-body">
                        <input type="hidden" asp-for="ReturnUrl" />

                        <div class="form-group">
                            <label asp-for="Username"></label>
                            <input class="form-control" @bind="Model.Username" placeholder="Username" autofocus>
                        </div>
                        <div class="form-group">
                            <label asp-for="Password"></label>
                            <input type="password" @bind="Model.Password" class="form-control" placeholder="Password" autocomplete="off">
                        </div>
                        @if (Model.AllowRememberLogin)
                        {
                            <div class="form-check">
                                <input class="form-check-input" @bind="Model.RememberLogin"
                                       type="checkbox" id="AllowOfflineAccess">
                                <label class="form-check-label" for="AllowOfflineAccess">
                                    Remenber My Login
                                </label>
                            </div>
                        }
                        <button class="btn btn-primary" @onclick="DoLogin">Login</button>
                        <button class="btn btn-secondary" @onclick="DoCancel">Cancel</button>
                    </div>
                </div>
            </div>
        }
        @if (Model.VisibleExternalProviders.Any())
        {
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-header">
                        <h2>External Account</h2>
                    </div>
                    <div class="card-body">
                        <ul class="list-inline">
                            @foreach (var provider in Model.VisibleExternalProviders)
                            {
                            
                            <li class="list-inline-item">
                                <form action="@($"https://localhost:44300/External/Challenge")" method="post">
                                    <input hidden name="scheme" value="@provider.AuthenticationScheme" />
                                    <input hidden name="returnUrl" value="@Model.ReturnUrl" />
                                    <button class="btn btn-secondary"
                                            type="submit">
                                        @provider.DisplayName
                                    </button>
                                </form>
                            </li> 
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    string Message;
    bool ShowPopper = false;
    LoginViewModel Model = new LoginViewModel();
    protected async override Task OnInitializedAsync()
    {
        Model.ReturnUrl = NavigationManager.Uri.Substring(NavigationManager.Uri.IndexOf('?') + 1);
        var Response =  await HttpClient.PostAsJsonAsync("https://localhost:44300/account/SignIn",Model);
        if (Response.IsSuccessStatusCode)
        {
            Model = await Response.Content.ReadFromJsonAsync<LoginViewModel>();
            StateHasChanged();
        }
    }

    private async Task DoLogin()
    {
        Message = "";
        var Response  = await HttpClient.PostAsJsonAsync("https://localhost:44300/account/Login", Model);
        if(Response.IsSuccessStatusCode)
        {
            var Url = await Response.Content.ReadAsStringAsync();
            NavigationManager.NavigateTo(Url,true);
        }
        else
        {
            Message = await Response.Content.ReadAsStringAsync();
            await SuccessPopper(Message);
        }

    }


    private  void DoExternalLogin(string scheme)
    {
        NavigationManager.NavigateTo($"https://localhost:44300/External/Challenge?scheme={scheme}&returnUrl={Model.ReturnUrl}",true);

    }


    private async Task DoCancel()
    {
        var Response = await HttpClient.PostAsJsonAsync("https://localhost:44300/account/Cancel", Model);
        if (Response.IsSuccessStatusCode)
        {
            var Url = await Response.Content.ReadAsStringAsync();
            NavigationManager.NavigateTo(Url, true);
        }
    }

    private async Task SuccessPopper(string message)
    {
        Message = message;
        ShowPopper = true;
        StateHasChanged();
        await Task.Delay(3000);
        ShowPopper = false;
        StateHasChanged();
    }

}
