@page "/identityserver4/register/apiresource"
@inject HttpClient HttpClient
@inject NavigationManager Navigation
<AuthorizeView>
    <Authorized>
        <Popper Show="@ShowPopper" Message="@Message" />
        <div class="container">
            <div class="card">
                <div class="card-header">
                    Registrar Api
                    <button class="btn btn-success" @onclick="Navigate" style="margin-left:50%">
                        Ver APIs
                    </button>
                </div>
                <div class="card-body">
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="ApiScopeName">Nombre de la Api</label>
                            <input class="form-control" @bind="@ApiResource.Name" id="ApiScopeName">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="ApiScopeDisplayName">Nombre a mostrar de la api</label>
                            <input class="form-control" @bind="ApiResource.DisplayName" id="ApiScopeDisplayName">
                        </div>
                    </div>
                    <div class="form-group form-check">
                        <input class="form-check-input" @bind="IsVisible"
                               type="checkbox" id="AllowOfflineAccess">
                        <label class="form-check-label" for="AllowOfflineAccess">
                            Habilitar Claim
                        </label>
                    </div>
                    @if (IsVisible)
                    {
                        <div class="form-group col-md-12 ">
                            <label for="Claim">Claim del Usuario</label>
                            <input class="form-control" @bind="ApiResource.Claim" id="Claim">
                        </div>
                    }
                    <div class="form-row">
                        <div class="form-group col-md-4">
                            <label for="inputState">Asignar Permisos</label>
                            @foreach (var Scope in Scopes)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" @bind="Scope.IsSelected" type="checkbox" id="AlwaysIncludeUserClaimsInIdToken">
                                    <label class="form-check-label" for="AlwaysIncludeUserClaimsInIdToken">
                                        @Scope.Name
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                    <button @onclick="RegisterApiResource" class="btn btn-primary">Registrar</button>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        No Tienes acceso al recurso.
    </NotAuthorized>
</AuthorizeView>


@code {        

    List<Scope> Scopes = new List<Scope>();

    string Message = string.Empty;

    bool ShowPopper;

    bool IsVisible = false;

    ApiResourceViewModel ApiResource = new ApiResourceViewModel();

    protected async override Task OnInitializedAsync()
    {
        var ScopesContent = await HttpClient.GetFromJsonAsync<List<ScopeViewModel>>("api/identityserver/ApiScope");
        if (ScopesContent.Count > 0)
        {
            Scopes.AddRange(ScopesContent.ConvertAll(x => new Scope() {
                Name = x.Name
            }));
        }

    }

    public async void RegisterApiResource()
    {
        ApiResource.Scopes = Scopes.Where(x => x.IsSelected == true)
            .Select(x => x.Name).ToArray();
        var Response = await HttpClient.PostAsJsonAsync<ApiResourceViewModel>
            ("api/identityserver/ApiResource", ApiResource);
        if (Response.IsSuccessStatusCode)
        {
            await SuccessPopper("Se registro correctamente la Api");
        }
    }

    private async Task SuccessPopper(string message)
    {
        Message = message;
        ShowPopper = true;
        StateHasChanged();
        await Task.Delay(3000);
        ShowPopper = false;
        StateHasChanged();
    }

    private void Navigate()
    {
        Navigation.NavigateTo("identityserver4/remove/apiresource");
    }
}
