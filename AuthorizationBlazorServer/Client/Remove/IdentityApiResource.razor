@page "/identityserver4/remove/apiresource"
@inject HttpClient HttpClient
<Popper Show="@ShowPopper" Message="@Message" />
<div class="container">
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Nombre</th>
                <th scope="col">Nombre a mostrar</th>
                <th scope="col">Accion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Api in ApiResources)
            {
                <tr>
                    <td>@Api.Name</td>
                    <td>@Api.DisplayName</td>
                    <td>
                        <button class="btn btn-danger"
                                @onclick="() => DeleteApiResource(Api.DisplayName)" >
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {

    List<ApiResourceViewModel> ApiResources = new List<ApiResourceViewModel>();

    string Message = string.Empty;

    bool ShowPopper;



    protected async override Task OnInitializedAsync()
    {
        ApiResources = await HttpClient.GetFromJsonAsync
            <List<ApiResourceViewModel>>("api/identityserver/ApiResouces");
    }


    async void DeleteApiResource(string name)
    {
        var Response =  await HttpClient.DeleteAsync(@$"api/identityserver/ApiResource/{name}");
        if (Response.IsSuccessStatusCode)
        {
            await SuccessPopper("Se elimino el recurso correctamente");
            ApiResources = await HttpClient.GetFromJsonAsync
            <List<ApiResourceViewModel>>("api/identityserver/ApiResouces");
            StateHasChanged();
        }
    }

    private async Task SuccessPopper(string message)
    {
        Message = message;
        ShowPopper = true;
        StateHasChanged();
        await Task.Delay(3000);
        ShowPopper = false;
        StateHasChanged();
    }

}

